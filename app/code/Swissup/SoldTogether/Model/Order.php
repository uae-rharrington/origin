<?php

namespace Swissup\SoldTogether\Model;

class Order extends AbstractModel
{
    /**
     * @var string
     */
    protected $_cacheTag = 'soldtogether_Order';

    /**
     * Prefix of model events names
     *
     * @var string
     */
    protected $_eventPrefix = 'soldtogether_Order';

    /**
     * Initialize resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init('Swissup\SoldTogether\Model\ResourceModel\Order');
    }

    public function deleteAutogeneratedRelations()
    {
        return $this->_getResource()->deleteAutogeneratedRelations();
    }

    public function getRelatedProductData($productId)
    {
        return $this->_getResource()->getRelatedProductData($productId);
    }

    public function relationExist($productId, $relatedId, $storeId)
    {
        return $this->_getResource()->relationExist($productId, $relatedId, $storeId);
    }

    public function updateProductRelations($data, $productId, $productName)
    {
        $this->_getResource()->deleteProductRelations($productId);
        foreach ($data as $item) {
            $this->setId(null)
                ->setProductId($productId)
                ->setRelatedId($item['id'])
                ->setStoreId(0)
                ->setProductName($productName)
                ->setRelatedName($item['name'])
                ->setIsAdmin(1)
                ->setWeight($item['position']);
            $this->save();
        }

        return $this;
    }

    public function createNewRelations($order)
    {
        $storeId = $order->getStoreId();
        $visibleItems = $order->getAllVisibleItems();
        $orderProducts = [];
        $result = [];
        if (count($visibleItems) > 1) {
            foreach ($visibleItems as $product) {
                $orderProducts[$product->getProductId()] = $product->getName();
            }
            foreach ($orderProducts as $productId => $productName) {
                foreach ($orderProducts as $relatedId => $relatedName) {
                    if ($productId == $relatedId) {
                        continue;
                    }
                    $result[] = [
                        'product_id'   => $productId,
                        'related_id'   => $relatedId,
                        'product_name' => $productName,
                        'related_name' => $relatedName,
                        'store_id'     => 0,
                        'weight'       => 1,
                        'is_admin'     => 0
                    ];
                }
            }
        }
        if (count($result) > 0) {
            // add data to db
            $dbData = [];
            foreach ($result as $item) {
                $itemExist = $this->relationExist($item['product_id'], $item['related_id'], $item['store_id']);
                if ($itemExist) {
                    try {
                        $this->load($itemExist);
                        if (!(int)$this->getIsAdmin()) {
                            $this->setWeight($this->getWeight() + 1);
                            $this->save();
                        }
                    } catch (\Exception $e) {
                        continue;
                    }
                } else {
                    $dbData[] = $item;
                }
            }
            if (count($dbData) > 0) {
                try {
                    $connection = $this->_getResource()->getConnection();
                    $connection->insertMultiple(
                        $this->_getResource()->getTable('swissup_soldtogether_order'),
                        $dbData
                    );
                } catch (\Exception $e) {
                    return true;
                }
            }
        }
        return true;
    }
}
