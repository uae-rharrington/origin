<?php
namespace Swissup\SoldTogether\Controller\Adminhtml\Order;

use Magento\Backend\App\Action\Context;

class Reindex extends \Magento\Backend\App\Action
{
    /**
     * Prefix for data in backend session
     *
     * @var string
     */
    protected $_dataPrefix = "swissup_soldtogether_order";
    /**
     * Size of step in data processing
     *
     * @var integer
     */
    protected $_stepSize = 10;
    /**
     * Message on processing complete
     *
     * @var string
     */
    protected $_completeMessage = "All Orders have been indexed.";
    /**
     * Json encoder
     *
     * @var \Magento\Framework\Json\EncoderInterface
     */
    protected $jsonEncoder;

    /**
     * @param Context $context
     * @param \Magento\Framework\Json\EncoderInterface $jsonEncoder
     */
    public function __construct(
        Context $context,
        \Magento\Framework\Json\EncoderInterface $jsonEncoder
    ) {
        $this->jsonEncoder = $jsonEncoder;
        parent::__construct($context);
    }
    /**
     * Reindex orders action
     *
     */
    public function execute()
    {
        if (!$this->_session->hasData($this->_dataPrefix."_init")) {
            $this->getModel()->deleteAutogeneratedRelations();
            $this->_session->setData($this->_dataPrefix."_init", 1);
            $this->_session->setData($this->_dataPrefix."_step", 1);
            $this->_session->setData(
                $this->_dataPrefix."_count",
                $this->getProcessItemsCount()
            );
            if ($this->_session->getData($this->_dataPrefix."_count") < 1) {
                $this->messageManager->addNotice(__("We couldn't find data to process"));
                return $this->getResponse()->setBody(
                    $this->jsonEncoder->encode([
                        'finished'  => true
                    ])
                );
            }
        }

        $step = $this->_session->getData($this->_dataPrefix."_step");
        $count = $this->_session->getData($this->_dataPrefix."_count");
        // Index data
        $result = $this->processStep($step, $this->_stepSize);
        if (count($result) > 0) {
            // add data to db
            $dbData = [];
            $model = $this->getModel();
            foreach ($result as $item) {
                $itemExist = $model->relationExist($item['product_id'], $item['related_id'], 0);
                if ($itemExist) {
                    try {
                        $model->load($itemExist);
                        if (!(int)$model->getIsAdmin()) {
                            $model->setWeight($model->getWeight() + 1);
                            $model->save();
                        }
                    } catch (\Exception $e) {
                        continue;
                    }
                } else {
                    $dbData[] = $item;
                }
            }

            if (count($dbData) > 0) {
                try {
                    $model->getResource()->getConnection()->insertMultiple(
                        $model->getResource()->getMainTable(),
                        $dbData
                    );
                } catch (\Exception $e) {
                }
            }
        }

        if (($step * $this->_stepSize) > $count) {
            $this->_session->unsetData($this->_dataPrefix."_init");
            $this->_session->unsetData($this->_dataPrefix."_count");
            $this->_session->unsetData($this->_dataPrefix."_step");
            $this->messageManager->addSuccess(__($this->_completeMessage));

            return $this->getResponse()->setBody(
                $this->jsonEncoder->encode([
                    'finished' => true
                ])
            );
        } else {
            $this->_session->setData(
                $this->_dataPrefix."_step",
                $this->_session->getData($this->_dataPrefix."_step") + 1
            );

            $percent = 100 * $step * $this->_stepSize / $count;
            $responseLoaderText = ($step * $this->_stepSize) . ' of ' . $count . ' - '
                . (int)$percent . '%';
            $this->getResponse()->setBody(
                $this->jsonEncoder->encode([
                    'finished'  => false,
                    'loaderText' => $responseLoaderText
                ])
            );
        }
    }

    protected function getModel()
    {
        return $this->_objectManager->create('Swissup\SoldTogether\Model\Order');
    }

    protected function getSalesOrderCollection()
    {
        return $this->_objectManager
            ->get('Magento\Sales\Model\ResourceModel\Order\Collection');
    }

    protected function getProcessItemsCount()
    {
        return $this->getSalesOrderCollection()->getTotalCount();
    }

    protected function processStep($step, $stepSize)
    {
        $result = [];
        $collection = $this->getSalesOrderCollection()->setPageSize($stepSize);
        if ($step > $collection->getLastPageNumber()) {
            return $result;
        }

        $collection->setCurPage($step);
        foreach ($collection as $order) {
            $storeId = $order->getStoreId();
            $visibleItems = $order->getAllVisibleItems();
            $orderProducts = [];
            if (count($visibleItems) > 1) {
                foreach ($visibleItems as $product) {
                    $orderProducts[$product->getProductId()] = $product->getName();
                }

                foreach ($orderProducts as $productId => $productName) {
                    foreach ($orderProducts as $relatedId => $relatedName) {
                        if ($productId == $relatedId) {
                            continue;
                        }
                        $result[] = [
                            'product_id'   => $productId,
                            'related_id'   => $relatedId,
                            'product_name' => $productName,
                            'related_name' => $relatedName,
                            'store_id'     => 0,
                            'weight'       => 1,
                            'is_admin'     => 0
                        ];
                    }
                }
            }
        }

        return $result;

    }

}
